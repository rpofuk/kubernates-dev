# This example below will create an PVC using the default StorageClass which you should
# have configured to AllowVolumeExpansion set to True before using this.  When the pod
# boots up it will automatically fill up the PVC disk, which should if you have the
# volume autoscaler installed automatically expand the volume based on the default parameters
#
# Simply run: kubectl apply -f examples/simple-pod-with-pvc.yaml
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: openebs-lvmpv
parameters:
  storage: "lvm"
  volgroup: "lvmvg"
provisioner: local.csi.openebs.io
allowVolumeExpansion: true
allowedTopologies:
- matchLabelExpressions:
  - key: kubernetes.io/hostname
    values:
      - kubernetes-node1
      - kubernetes-node2
      - kubernetes-node3
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: test-claim1
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: openebs-lvmpv
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: Pod
metadata:
  name: test-claim1
spec:
  containers:
  - name: write
    image: ubuntu:24.04
    command: ["/bin/bash"]
    args: ["-c", "while true; do touch /mnt/pv/test.img; ls -lah /mnt/pv/test.img; head -c 8M </dev/urandom >> /mnt/pv/test.img; sleep 2; done"]
    volumeMounts:
    - mountPath: "/mnt/pv"
      name: test-volume
    stdin: true
    stdinOnce: true
    tty: true
  volumes:
  - name: test-volume
    persistentVolumeClaim:
      claimName: test-claim1
  restartPolicy: Never
